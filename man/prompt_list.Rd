% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prompt_builders.R
\name{prompt_list}
\alias{prompt_list}
\title{Create Lists of Prompts for API Requests}
\usage{
prompt_list(user, api, system, data, rtika = FALSE)
}
\arguments{
\item{user}{A character vector of user prompts or file paths containing the
user content. If file paths are provided, the files are read, and their
content is concatenated into a single prompt. If the package
\href{https://cran.r-project.org/package=rtika}{rtika} is installed and rtika is
\code{TRUE}, the function will read all kinds of content, including PDF files.
Otherwise it will default to \code{\link[readr:read_lines]{readr::read_lines()}}.}

\item{api}{A string specifying the API to use. Must be one of \code{"gemini"},
\code{"openai"}, \code{"claude"}, \code{"llamafile"}, or \code{"mistral"}.}

\item{system}{Optional. A character string providing system-level
instructions or context for the API.}

\item{data}{Optional. A data frame containing variables to be interpolated
into the \code{user} content using \code{stringr::str_glue_data()}.}

\item{rtika}{Whether to use the
\href{https://cran.r-project.org/package=rtika}{rtika} package to read files.
Must be installed separately - and it contains a Java dependency. Default
is \code{FALSE}.}
}
\value{
A list of structured prompts for use with \code{\link[=call_api]{call_api()}}. The
exact structure of each prompt depends on the specified API.
}
\description{
This function creates structured prompt lists for use with \code{\link[=call_api]{call_api()}}. It
processes input \code{user} content and combines it with optional \code{system}
instructions, returning a list of prompts compatible with the specified API.
}
\details{
This function is designed for sending multiple requests to an API,
allowing the user to specify multiple input prompts. It reads and processes
file-based user content if file paths are provided and ensures
compatibility with the target API.
}
\examples{
# Create list of prompts for multiple requests to the Gemini API
prompts <- prompt_list(
  user = c("What is the capital of France?", "Explain quantum computing."),
  api = "gemini",
  system = "You are a knowledgeable assistant."
)
print(prompts)
}
\seealso{
\itemize{
\item \code{\link[=prompt]{prompt()}} for creating a single prompt for single-request API functions.
\item \code{\link[=build_prompts_from_files]{build_prompts_from_files()}} for another way of constructing prompts from file-based content.
}

Other prompts: 
\code{\link{build_prompts_from_files}()},
\code{\link{prompt}()}
}
\concept{prompts}
