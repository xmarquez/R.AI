% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/openai-vector-store-files.R
\name{openai_create_vector_store_file}
\alias{openai_create_vector_store_file}
\alias{openai_list_vector_store_files}
\alias{openai_get_vector_store_file}
\alias{openai_delete_vector_store_file}
\title{Create, list, update, retrieve, or delete a Vector Store File in OpenAI}
\usage{
openai_create_vector_store_file(
  vector_store_id,
  file_id,
  chunking_strategy = NULL
)

openai_list_vector_store_files(
  vector_store_id,
  limit = 20,
  order = "desc",
  after = NULL,
  before = NULL,
  filter = NULL
)

openai_get_vector_store_file(vector_store_id, file_id)

openai_delete_vector_store_file(vector_store_id, file_id)
}
\arguments{
\item{vector_store_id}{Character. Required. The ID of the vector store.
Create a vector store with \code{\link[=openai_create_vector_store]{openai_create_vector_store()}} and find the id
of an already created vector store with \code{\link[=openai_list_vector_stores]{openai_list_vector_stores()}}.}

\item{file_id}{Character. Required. The ID of the file that the vector store
should use or retrieve. Upload a file with \code{\link[=openai_upload_file]{openai_upload_file()}}, and get
the id of already uploaded files with \code{\link[=openai_list_files]{openai_list_files()}}.}

\item{chunking_strategy}{List. Optional. The chunking strategy used to chunk
the file(s). If not set, the \code{auto} strategy will be used.}

\item{limit}{Integer. Optional. A limit on the number of objects to return.
Limit can range between 1 and 100, with a default of 20.}

\item{order}{Character. Optional. Sort order by the \code{created_at} timestamp of
the objects. Defaults to \code{"desc"} for descending order. Use \code{"asc"} for
ascending order.}

\item{after}{Character. Optional. A cursor for use in pagination. The \code{after}
parameter is an object ID that defines your place in the list. For example,
if a list request returns 100 objects ending with \code{obj_foo}, a subsequent
call can include \code{after=obj_foo} to fetch the next page of the list.}

\item{before}{Character. Optional. A cursor for use in pagination. The
\code{before} parameter is an object ID that defines your place in the list. For
example, if a list request returns 100 objects starting with \code{obj_foo}, a
subsequent call can include \code{before=obj_foo} to fetch the previous page of
the list.}

\item{filter}{Character. Optional. Filter by file status. One of
\code{"in_progress"}, \code{"completed"}, \code{"failed"}, or \code{"cancelled"}.}
}
\value{
For \code{openai_create_vector_store_file} and
\code{openai_get_vector_store_file}, a list containing the created vector store
file object, which includes:
\itemize{
\item \code{id}: string. The identifier of the file in the vector store.
\item \code{object}: string. The object type, which is always \code{"vector_store.file"}.
\item \code{created_at}: integer. The Unix timestamp (in seconds) for when the vector store file was created.
\item \code{usage_bytes}: integer. The total number of bytes used by the file.
\item \code{vector_store_id}: string. The ID of the vector store the file is attached to.
\item \code{status}: string. The status of the vector store file, which can be either \code{"in_progress"}, \code{"completed"}, or \code{"error"}.
\item \code{last_error}: string or \code{NULL}. Any error message associated with the file creation, or \code{NULL} if no error occurred.
}

For \code{openai_list_vector_store_files}, a list containing vector store file
objects.

For \code{openai_delete_vector_store_file}, a list containing the deletion
status.
}
\description{
These functions interact with the OpenAI \href{https://platform.openai.com/docs/api-reference/vector-stores-files}{Vector Store Files API}. See
the documentation there for more.
}
\details{
\code{openai_delete_vector_store_file} removes the file from the vector
store but does not delete the file itself. To delete the file completely,
use \code{\link[=openai_delete_file]{openai_delete_file()}}.
}
\seealso{
Other openai: 
\code{\link{openai_batch_job}()},
\code{\link{openai_cancel_batch}()},
\code{\link{openai_check_batch_status}()},
\code{\link{openai_create_assistant}()},
\code{\link{openai_create_message}()},
\code{\link{openai_create_run}()},
\code{\link{openai_create_thread}()},
\code{\link{openai_create_vector_store}()},
\code{\link{openai_create_vector_store_file_batch}()},
\code{\link{openai_download_batch_results}()},
\code{\link{openai_list_batches}()},
\code{\link{openai_list_run_steps}()},
\code{\link{openai_poll_and_download}()},
\code{\link{openai_submit_tool_outputs}()},
\code{\link{openai_upload_file}()}

Other vector stores: 
\code{\link{openai_create_vector_store}()},
\code{\link{openai_create_vector_store_file_batch}()}

Other files: 
\code{\link{openai_create_vector_store_file_batch}()},
\code{\link{openai_download_batch_results}()},
\code{\link{openai_upload_file}()}
}
\concept{files}
\concept{openai}
\concept{vector stores}
