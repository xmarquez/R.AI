% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/openai-vector-store.R
\name{openai_create_vector_store}
\alias{openai_create_vector_store}
\alias{openai_list_vector_stores}
\alias{openai_get_vector_store}
\alias{openai_update_vector_store}
\alias{openai_delete_vector_store}
\title{Create, list, update, retrieve, or delete a Vector Store in OpenAI}
\usage{
openai_create_vector_store(
  file_ids = NULL,
  name = NULL,
  expires_after = NULL,
  chunking_strategy = NULL,
  metadata = NULL
)

openai_list_vector_stores(
  limit = 20,
  order = "desc",
  after = NULL,
  before = NULL
)

openai_get_vector_store(vector_store_id)

openai_update_vector_store(
  vector_store_id,
  name = NULL,
  expires_after = NULL,
  metadata = NULL
)

openai_delete_vector_store(vector_store_id)
}
\arguments{
\item{file_ids}{Character vector. Optional. A list of File IDs that the
vector store should use. Useful for tools like \code{file_search} that can
access files.}

\item{name}{Character. Optional. The name of the vector store.}

\item{expires_after}{List. Optional. The expiration policy for the vector
store. Specify expiration details as a list object with \code{anchor} and \code{days}
fields:
\itemize{
\item \code{anchor}: Timestamp after which the expiration policy applies. Supported anchors: \code{last_active_at}.
\item \code{days}: The number of days after the anchor time that the vector store will expire.
}}

\item{chunking_strategy}{List. Optional. The chunking strategy used to chunk
the file(s). If not set, the \code{auto} strategy will be used. Only applicable
if \code{file_ids} is non-empty.}

\item{metadata}{List. Optional. A set of up to 16 key-value pairs that can be
attached to an object. Keys can be a maximum of 64 characters long, and
values can be a maximum of 512 characters long.}

\item{limit}{Integer. Optional. A limit on the number of vector stores to
return. The limit can range between 1 and 100, with a default value of 20.}

\item{order}{Character. Optional. Sort order by the \code{created_at} timestamp of
the objects. Defaults to \code{"desc"} for descending order. Use \code{"asc"} for
ascending order.}

\item{after}{Character. Optional. A cursor for use in pagination. The \code{after}
parameter is an object ID that defines your place in the list. For example,
if a list request returns 100 objects ending with \code{obj_foo}, a subsequent
call can include \code{after=obj_foo} to fetch the next page of the list.}

\item{before}{Character. Optional. A cursor for use in pagination. The
\code{before} parameter is an object ID that defines your place in the list. For
example, if a list request returns 100 objects starting with \code{obj_foo}, a
subsequent call can include \code{before=obj_foo} to fetch the previous page of
the list.}

\item{vector_store_id}{Character. ID of the vector store to retrieve, update,
or delete.}
}
\value{
For \code{openai_create_vector_store}, \code{openai_create_vector_store}, and
\code{openai_get_vector_store}, a list containing the created vector store
object, which includes the following fields:
\itemize{
\item \code{id}: string. The identifier, which can be referenced in API endpoints.
\item \code{object}: string. The object type, which is always \code{"vector_store"}.
\item \code{created_at}: integer. The Unix timestamp (in seconds) for when the vector store was created.
\item \code{name}: string. The name of the vector store.
\item \code{usage_bytes}: integer. The total number of bytes used by the files in the vector store.
\item \code{file_counts}: object. An object showing the counts of files in the vector store.
\item \code{status}: string. The status of the vector store, which can be either \code{"expired"}, \code{"in_progress"}, or \code{"completed"}. A status of \code{"completed"} indicates that the vector store is ready for use.
\item \code{expires_after}: object. The expiration policy for the vector store.
\item \code{expires_at}: integer or \code{NULL}. The Unix timestamp (in seconds) for when the vector store will expire.
\item \code{last_active_at}: integer or \code{NULL}. The Unix timestamp (in seconds) for when the vector store was last active.
\item \code{metadata}: map. A set of 16 key-value pairs that can be attached to an object. Keys can be a maximum of 64 characters long, and values can be a maximum of 512 characters long.
}

For \code{openai_list_vector_stores}, a list of vector store objects.

For \code{openai_delete_vector_store}, a list with the deletion status.
}
\description{
These functions interact with the OpenAI \href{https://platform.openai.com/docs/api-reference/vector-stores}{vector store API}. See the
documentation there for more.
}
\seealso{
Other openai: 
\code{\link{openai_batch_job}()},
\code{\link{openai_cancel_batch}()},
\code{\link{openai_check_batch_status}()},
\code{\link{openai_create_assistant}()},
\code{\link{openai_create_message}()},
\code{\link{openai_create_run}()},
\code{\link{openai_create_thread}()},
\code{\link{openai_create_vector_store_file}()},
\code{\link{openai_create_vector_store_file_batch}()},
\code{\link{openai_download_batch_results}()},
\code{\link{openai_list_batches}()},
\code{\link{openai_list_run_steps}()},
\code{\link{openai_poll_and_download}()},
\code{\link{openai_submit_tool_outputs}()},
\code{\link{openai_upload_file}()}

Other vector stores: 
\code{\link{openai_create_vector_store_file}()},
\code{\link{openai_create_vector_store_file_batch}()}
}
\concept{openai}
\concept{vector stores}
