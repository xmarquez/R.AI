% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/embed-methods.R
\name{embed}
\alias{embed}
\alias{embed.openai_character}
\alias{embed.mistral_character}
\alias{embed.gemini_character}
\alias{embed.cohere_character}
\alias{embed.voyage_character}
\alias{embed.llama_cpp_character}
\alias{embed.ollama_character}
\title{Generate Embeddings from Text Content}
\usage{
embed(content, model = NULL, quiet = FALSE, max_retries = 3, ...)

\method{embed}{openai_character}(
  content,
  model = "text-embedding-3-large",
  quiet = FALSE,
  max_retries = 3,
  ...
)

\method{embed}{mistral_character}(content, model = "mistral-embed", quiet = FALSE, max_retries = 3, ...)

\method{embed}{gemini_character}(
  content,
  model = "text-embedding-004",
  quiet = FALSE,
  max_retries = 10,
  ...
)

\method{embed}{cohere_character}(
  content,
  model = "embed-english-v3.0",
  quiet = FALSE,
  max_retries = 3,
  ...
)

\method{embed}{voyage_character}(content, model = "voyage-3-lite", quiet = FALSE, max_retries = 3, ...)

\method{embed}{llama_cpp_character}(content, model = NULL, quiet = FALSE, max_retries = 3, ...)

\method{embed}{ollama_character}(content, model, quiet = FALSE, max_retries = 3, ...)
}
\arguments{
\item{content}{A character vector of one or more text items to be embedded.}

\item{model}{A character string specifying the model to be used. Defaults vary
by backend (e.g., \code{"text-embedding-3-large"} for OpenAI).}

\item{quiet}{Logical, defaults to \code{FALSE}. If \code{TRUE}, suppresses most messages
(like batch progress).}

\item{max_retries}{Integer, defaults to 3. Maximum number of retries on
transient failures.}

\item{...}{Additional arguments passed to the backend-specific method.
Examples include:
\itemize{
\item \code{dimensions} (OpenAI)
\item \code{input_type}, \code{embedding_types} (Cohere)
\item \code{truncate}, \code{options} (Ollama)
\item \code{batch_size} or \code{encoding_format} (Voyage)
}}
}
\value{
A list of numeric vectors (one embedding per input text). The returned
object has class \code{c("embedding", "list")} plus any additional classes.
Some methods also attach attributes like \code{total_tokens} or \code{model}.
}
\description{
A generic function to generate vector embeddings for given text content using
various backends (OpenAI, Mistral, Gemini, Cohere, Voyage, Llama.CPP, Ollama, etc.).
You specify which backend by dispatching on the \strong{class} of \code{content} or via
a helper function that sets the class. Each backend can accept additional
parameters (via \code{...}) depending on its API.
}
\section{Environment Variables}{

Most remote backends require an API key, e.g.:
\itemize{
\item \code{OPENAI_API_KEY} for OpenAI
\item \code{MISTRAL_API_KEY} for Mistral
\item \code{GEMINI_API_KEY} for Gemini
\item \code{COHERE_API_KEY} for Cohere
\item \code{VOYAGE_API_KEY} for Voyage
}
}

\examples{
\dontrun{
# Example: OpenAI embeddings
txt <- c("Hello world!", "Some more text")
emb_oa <- embed(txt, model = "text-embedding-3-large")
str(emb_oa)

# Example: Mistral embeddings
txt_mistral <- c("Bonjour le monde")
emb_mi <- embed(txt_mistral, model = "mistral-embed")
str(emb_mi)

# If calling Ollama (local Llama-based model):
emb_ol <- embed(txt, model = "my-ollama-model", truncate = TRUE)
str(emb_ol)
}

}
